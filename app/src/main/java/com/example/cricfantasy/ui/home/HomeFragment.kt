package com.example.cricfantasy.ui.home

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.Refresh
import androidx.compose.runtime.*
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.ComposeView
import androidx.compose.ui.platform.ViewCompositionStrategy
import androidx.compose.ui.unit.dp
import androidx.lifecycle.ViewModelProvider
import com.example.cricfantasy.BaseFragment
import com.example.cricfantasy.databinding.FragmentHomeBinding
import me.vponomarenko.compose.shimmer.shimmer


class HomeFragment : BaseFragment() {

    private var _binding: FragmentHomeBinding? = null
    private val entrees: MutableList<ItemViewState> = mutableListOf<ItemViewState>()

    // This property is only valid between onCreateView and
    // onDestroyView.
    private val binding get() = _binding!!
    private lateinit var  composeViewModel : MyViewModel


    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        fragmentViewModel =
            ViewModelProvider(this)[HomeViewModel::class.java]

        composeViewModel = ViewModelProvider(this)[MyViewModel::class.java]

        _binding = FragmentHomeBinding.inflate(inflater, container, false)
        val root: View = binding.root

        val textView: TextView = binding.textHome
        fragmentViewModel.text.observe(viewLifecycleOwner) {
            textView.text = it
        }




        val composeView : ComposeView = binding.composeView
        composeView.setViewCompositionStrategy(ViewCompositionStrategy.DisposeOnViewTreeLifecycleDestroyed)
        entrees.add(ItemViewState("A new item"))
        updateComposeView(composeView, entrees)
        binding.button.setOnClickListener {
            entrees.add(ItemViewState("Item added from click"))
            updateComposeView(composeView, entrees)
            //composeViewModel.addItem(ItemViewState("Item added from click"))
            Log.i("INFO: ","clicked click me ${entrees.size}");
        }

        return root
    }

    override fun getView(): View? {
        return super.getView()
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    private fun updateComposeView(composeView : ComposeView, messages : List<ItemViewState>){
        composeView.setContent {
            // In Compose world
            MaterialTheme {
//                composeViewModel.addItem(ItemViewState("Item  Initial"))
//                ItemsScreen(viewModel = composeViewModel, entries = entrees)
                MessageList(messages = messages)

            }
        }
    }
}
@Composable
fun Greeting(name: String) {
    Text(text = "Hello $name!")
}
// A data object which describes how the list item should look
data class ItemViewState(
    val text: String
)



@Composable
fun MessageList(messages: List<ItemViewState>) {
    LazyColumn {
        items(messages) { message ->
            MySimpleListItem(message)
        }
    }
}
// The UI for each list item can be generated by a reusable composable
@Composable
fun MySimpleListItem(itemViewState: ItemViewState) {
    Card(modifier = Modifier
        .fillMaxSize()
        .padding(all = 10.dp),
        elevation = 8.dp, border = BorderStroke(width =  1.dp, color = Color.LightGray)
    ){
        Column(
            modifier = Modifier
                .fillMaxSize().padding(all = 10.dp)
                .shimmer()
        ){
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(16.dp)
                    .background(
                        color = Color(0xFFF3F3F3),
                        shape = RoundedCornerShape(4.dp)
                    )
            )
            Spacer(modifier = Modifier.height(4.dp))
            Row(modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly) {
                Box(
                    modifier = Modifier
                        .width(16.dp)
                        .height(16.dp)
                        .background(
                            color = Color(0xFFF3F3F3),
                            shape = RoundedCornerShape(4.dp)
                        )
                )
                Box(
                    modifier = Modifier
                        .width(48.dp).height(16.dp)
                        .background(
                            color = Color(0xFFF3F3F3),
                            shape = RoundedCornerShape(4.dp)
                        )
                )
                Box(
                    modifier = Modifier
                        .width(16.dp)
                        .height(16.dp)
                        .background(
                            color = Color(0xFFF3F3F3),
                            shape = RoundedCornerShape(4.dp)
                        )
                )
            }
            Spacer(modifier = Modifier.height(4.dp))
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(16.dp)
                    .background(
                        color = Color(0xFFF3F3F3),
                        shape = RoundedCornerShape(4.dp)
                    )
            )
            //Text(text = itemViewState.text)
        }
    }

}

@Composable
fun ItemsScreen(
    viewModel: MyViewModel ,entries : MutableList<ItemViewState>
) {
    // State
    val messages by viewModel.items.observeAsState()
    var refreshCount by remember { mutableStateOf(1) }

    // API call
    LaunchedEffect(key1 = refreshCount) {
        viewModel.addItem(ItemViewState("new refersh item"))
    }

    // UI
    Column() {
        IconButton(onClick = {
            refreshCount++
        }) {
            Icon(Icons.Outlined.Refresh, "Refresh")
        }
        if(messages != null){
            MessageList(messages = messages!!)
        }

    }
}

